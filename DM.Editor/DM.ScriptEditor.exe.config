<?xml version="1.0" encoding="utf-8"?>
<configuration>
  
  <configSections>
    <section name="BitFactory.Logging" type="BitFactory.Logging.Configuration.LoggingSection, BitFactory.Logging" />
    <section name="DispatchManager.QueueConnections" type="DM.Library.QueueConnectionSection, DM.Library" />
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />

    <!-- Generic queue definition section -->
    <section name="Scripting.QueueConnections" type="DM.Library.ScriptingQueueConnectionsSection, DM.Library" />

	<!-- DataProxy Client Section  -->
    <!-- <section name="Scripting.DataProxyClient" type="DM.DataProxyClient.DataProxyConnectionsSection, DM.DataProxyClient" /> -->

  </configSections>
  
  <connectionStrings>

    <!-- AiDB Connection string is used for the dispatch messages -->
    <add name="AiDb" connectionString="Data Source=..\AilDb.sdf;Max Database Size=4000;Persist Security Info=False;" providerName="System.Data.SqlServerCe.4.0" />

  </connectionStrings>
  
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="mssqllocaldb" />
      </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>

  
  
  <appSettings>
    <!-- Ail Schema Namespace -->
    <add key="SchemaUser" value="MES" />
    
    <!-- Dispatch Manager Application Server -->
    <add key="DispatchManagerAppServer" value="http://localhost:8000" />

    <!-- ************* QUEUE DEFINITION ****************************************************** -->
    <!-- All queue names and server connections are detailed in the Connection String settings -->
    <!-- Queuing library to use: Debugging queue library which will serialize messages to disk -->
    <!-- Development test queue -->
    <add key="QueueLibrary" value="DM.Library.MessageQ.MsMqClient,DM.Library" />

    <!-- This has to be an absolute path -->
    <add key="AssemblyReferenceFolders" value=".\DynamicDll" />
    
    <add key="AssemblyReferences" value="" />
    <add key="ScriptNamespaces" value="System.Linq,System.Windows.Forms" />

  </appSettings>

	<!-- Scripting DataProxyClient Configuration goes here -->
	
    <!--	
	<Scripting.DataProxyClient>
		<Connections>
			<Connection name="AilDataProxy" url="http://localhost:8080/">
				<TagSets>
					<TagSet name="Events" interval="500">
						<TagItemChanges>
							<TagItemChange name="DataEvent1" saveState="true" script="DataEvent1_Change"/>
							<TagItemChange name="DataEvent2" saveState="false" script="DataEvent2_Change"/>
							<TagItemChange name="DataEvent3" saveState="true" script="DataEvent3_Change"/>
							<TagItemChange name="DataEvent4" saveState="true" script="DataEvent4_Change"/>
						</TagItemChanges>
					</TagSet>
				</TagSets>
			</Connection>
		</Connections>
	</Scripting.DataProxyClient> -->
   

   <Scripting.QueueConnections>
    <Queues>
	
	 <Queue name="MM"
       clientClass="DM.Library.MessageQ.FileWriter,DM.Library"
       serverClass="">
		<Parameters>
			<Parameter name="targetFolder" value="C:\Temp\MM" />
        </Parameters>
      </Queue>

       <Queue name="MSMQ_ReadAndWrite" 
			    clientClass="DM.Library.MessageQ.MsMqClient,DM.Library" 
			    serverClass="DM.Library.MessageQ.MsMqDataSource,DM.Library">
        <Parameters>
		    <!-- short queue name -->
            <Parameter name="queueName" value="msmq_rw"/>
		    <!-- long queue path...ending part must match short queue name -->
            <Parameter name="queuePath" value="FormatName:Direct=OS:.\private$\msmq_rw"/>
            <!-- Formatter Types
	            Xml       - Xml formatted string with .net specific datatype of DispatchMessage or C# String
	            Binary    - .NET Binary serialization
	            Json      - Json formatted string with specified encoding type
	            String    - Basic string with specified encoding type
	            ActiveX   - Legacy support for Vb6
            -->
            <Parameter name="formatterType" value="Text"/>
		    <!-- Encoding Types only applies to String or Json Formatters 
		    UTF7     - Encoding UTF7 type
		    Unicode  - Encoding for 16-bit format little indian order
		    ASCII    - Encoding for 7-bit ascii set
		    UTF8     - Encoding UTF8 type
		    UTF32    - Uses UTF32 little indian order
		    -->
		    <Parameter name="encoding" value="UTF8"/>

            <!-- Possible values that would define a message location
                    msmq:label = default if blank
                    msmq:defaultMessage = use defaultMessage from the file
                    json:<path>
                    xml:<path>
            -->
            <Parameter name="messageTypePath" value="json:Header.MessageName"/>
            <Parameter name="defaultMessage" value="Unknown_Message"/>
			
		    <!-- Indicate if the Queue is configured as a Transactional queue.  Required at the time the queue is defined -->
            <Parameter name="isTransactional" value="True"/>
        </Parameters>
        </Queue>

        <Queue name="MSMQ_Write" 
			    clientClass="DM.Library.MessageQ.MsMqClient,DM.Library" 
			    serverClass="">
        <Parameters>
            <Parameter name="queueName" value="msmq_w"/>
            <Parameter name="queuePath" value="FormatName:Direct=OS:.\private$\msmq_w"/>
            <Parameter name="formatterType" value="Text"/>
            <Parameter name="messageTypePath" value="json:Header.MessageName"/>
            <Parameter name="defaultMessage" value="MES_PDO_Unknown_Message"/>
            <Parameter name="isTransactional" value="True"/>
		    <Parameter name="encoding" value="UTF8"/>
        </Parameters>
        </Queue>
    </Queues>      
  </Scripting.QueueConnections>
  
  <!-- ********************** APPLICATION LOGGING **************************************** -->
  <BitFactory.Logging name="global" xmlns="http://BitFactory.Logging">
    <compositeLoggers>
      <compositeLogger name="GlobalRollingFiles" isAsynchronous="true">

        <rollingDateFileLoggers>
          <rollingDateFileLogger name="myRollingFileLogger1" isEnabled="true" formattedFileName="Editor_{timestamp:yyyyMMdd}.log" maxFilesToKeep="10" autoDelete="true" severity="Debug" />
        </rollingDateFileLoggers>

      </compositeLogger>
    </compositeLoggers>
  </BitFactory.Logging>
  
	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6" />
	</startup>

	<runtime>
        <!-- Use this configuration when attempting to access the DM.DataProxyClient.OpcProxyInterface
		which is implemented within the DM.DataProxyClient DataSource.  Use the same configuration for
		OPC TagSets and TagChangeEvent script endpoints with server and client -->
		
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<probing privatePath=".;.\DynamicDll"/>
		</assemblyBinding> 	
		
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
		  <dependentAssembly>
			<assemblyIdentity name="System.Data" publicKeyToken="b77a5c561934e089" culture="neutral" />
			<bindingRedirect oldVersion="0.0.0.0-4.0.0.0" newVersion="4.0.0.0" />
		  </dependentAssembly>
		</assemblyBinding>
  </runtime>
  
</configuration>
